// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LinkService is an autogenerated mock type for the LinkService type
type LinkService struct {
	mock.Mock
}

// CreateShortURL provides a mock function with given fields: ctx, originalURL
func (_m *LinkService) CreateShortURL(ctx context.Context, originalURL string) (string, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteShortURL provides a mock function with given fields: ctx, shortURL
func (_m *LinkService) DeleteShortURL(ctx context.Context, shortURL string) error {
	ret := _m.Called(ctx, shortURL)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolveShortURL provides a mock function with given fields: ctx, shortURL
func (_m *LinkService) ResolveShortURL(ctx context.Context, shortURL string) (string, error) {
	ret := _m.Called(ctx, shortURL)

	if len(ret) == 0 {
		panic("no return value specified for ResolveShortURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLinkService creates a new instance of LinkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkService {
	mock := &LinkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

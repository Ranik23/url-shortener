// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/url-shortener/internal/service/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockService) CreateShortURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockServiceMockRecorder) CreateShortURL(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockService)(nil).CreateShortURL), ctx, originalURL)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, username)
}

// DeleteShortURL mocks base method.
func (m *MockService) DeleteShortURL(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURL", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURL indicates an expected call of DeleteShortURL.
func (mr *MockServiceMockRecorder) DeleteShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURL", reflect.TypeOf((*MockService)(nil).DeleteShortURL), ctx, shortURL)
}

// DeleteUser mocks base method.
func (m *MockService) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockService)(nil).DeleteUser), ctx, username)
}

// GetStats mocks base method.
func (m *MockService) GetStats(ctx context.Context, shortURL string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, shortURL)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockServiceMockRecorder) GetStats(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockService)(nil).GetStats), ctx, shortURL)
}

// ResolveShortURL mocks base method.
func (m *MockService) ResolveShortURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveShortURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveShortURL indicates an expected call of ResolveShortURL.
func (mr *MockServiceMockRecorder) ResolveShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveShortURL", reflect.TypeOf((*MockService)(nil).ResolveShortURL), ctx, shortURL)
}

// MockLinkService is a mock of LinkService interface.
type MockLinkService struct {
	ctrl     *gomock.Controller
	recorder *MockLinkServiceMockRecorder
}

// MockLinkServiceMockRecorder is the mock recorder for MockLinkService.
type MockLinkServiceMockRecorder struct {
	mock *MockLinkService
}

// NewMockLinkService creates a new mock instance.
func NewMockLinkService(ctrl *gomock.Controller) *MockLinkService {
	mock := &MockLinkService{ctrl: ctrl}
	mock.recorder = &MockLinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkService) EXPECT() *MockLinkServiceMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockLinkService) CreateShortURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockLinkServiceMockRecorder) CreateShortURL(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockLinkService)(nil).CreateShortURL), ctx, originalURL)
}

// DeleteShortURL mocks base method.
func (m *MockLinkService) DeleteShortURL(ctx context.Context, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURL", ctx, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURL indicates an expected call of DeleteShortURL.
func (mr *MockLinkServiceMockRecorder) DeleteShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURL", reflect.TypeOf((*MockLinkService)(nil).DeleteShortURL), ctx, shortURL)
}

// ResolveShortURL mocks base method.
func (m *MockLinkService) ResolveShortURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveShortURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveShortURL indicates an expected call of ResolveShortURL.
func (mr *MockLinkServiceMockRecorder) ResolveShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveShortURL", reflect.TypeOf((*MockLinkService)(nil).ResolveShortURL), ctx, shortURL)
}

// MockStatService is a mock of StatService interface.
type MockStatService struct {
	ctrl     *gomock.Controller
	recorder *MockStatServiceMockRecorder
}

// MockStatServiceMockRecorder is the mock recorder for MockStatService.
type MockStatServiceMockRecorder struct {
	mock *MockStatService
}

// NewMockStatService creates a new mock instance.
func NewMockStatService(ctrl *gomock.Controller) *MockStatService {
	mock := &MockStatService{ctrl: ctrl}
	mock.recorder = &MockStatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatService) EXPECT() *MockStatServiceMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockStatService) GetStats(ctx context.Context, shortURL string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, shortURL)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStatServiceMockRecorder) GetStats(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatService)(nil).GetStats), ctx, shortURL)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, username)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, username)
}

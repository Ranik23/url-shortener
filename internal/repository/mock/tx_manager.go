// Code generated by MockGen. DO NOT EDIT.
// Source: /home/anton/url-shortener/internal/repository/tx_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	repository "github.com/Ranik23/url-shortener/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockSettings is a mock of Settings interface.
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings.
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance.
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// CtxKey mocks base method.
func (m *MockSettings) CtxKey() repository.CtxKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CtxKey")
	ret0, _ := ret[0].(repository.CtxKey)
	return ret0
}

// CtxKey indicates an expected call of CtxKey.
func (mr *MockSettingsMockRecorder) CtxKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxKey", reflect.TypeOf((*MockSettings)(nil).CtxKey))
}

// EnrichBy mocks base method.
func (m *MockSettings) EnrichBy(external repository.Settings) repository.Settings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichBy", external)
	ret0, _ := ret[0].(repository.Settings)
	return ret0
}

// EnrichBy indicates an expected call of EnrichBy.
func (mr *MockSettingsMockRecorder) EnrichBy(external interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichBy", reflect.TypeOf((*MockSettings)(nil).EnrichBy), external)
}

// TimeOutOrNil mocks base method.
func (m *MockSettings) TimeOutOrNil() *time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeOutOrNil")
	ret0, _ := ret[0].(*time.Duration)
	return ret0
}

// TimeOutOrNil indicates an expected call of TimeOutOrNil.
func (mr *MockSettingsMockRecorder) TimeOutOrNil() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeOutOrNil", reflect.TypeOf((*MockSettings)(nil).TimeOutOrNil))
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockTxManager) Do(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockTxManagerMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTxManager)(nil).Do), arg0, arg1)
}

// DoWithSettings mocks base method.
func (m *MockTxManager) DoWithSettings(arg0 context.Context, arg1 repository.Settings, arg2 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWithSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWithSettings indicates an expected call of DoWithSettings.
func (mr *MockTxManagerMockRecorder) DoWithSettings(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWithSettings", reflect.TypeOf((*MockTxManager)(nil).DoWithSettings), arg0, arg1, arg2)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), arg0)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), arg0)
}

// Transaction mocks base method.
func (m *MockTransaction) Transaction() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockTransactionMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTransaction)(nil).Transaction))
}

// MockCtxManager is a mock of CtxManager interface.
type MockCtxManager struct {
	ctrl     *gomock.Controller
	recorder *MockCtxManagerMockRecorder
}

// MockCtxManagerMockRecorder is the mock recorder for MockCtxManager.
type MockCtxManagerMockRecorder struct {
	mock *MockCtxManager
}

// NewMockCtxManager creates a new mock instance.
func NewMockCtxManager(ctrl *gomock.Controller) *MockCtxManager {
	mock := &MockCtxManager{ctrl: ctrl}
	mock.recorder = &MockCtxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCtxManager) EXPECT() *MockCtxManagerMockRecorder {
	return m.recorder
}

// ByKey mocks base method.
func (m *MockCtxManager) ByKey(arg0 context.Context, arg1 repository.CtxKey) repository.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByKey", arg0, arg1)
	ret0, _ := ret[0].(repository.Transaction)
	return ret0
}

// ByKey indicates an expected call of ByKey.
func (mr *MockCtxManagerMockRecorder) ByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByKey", reflect.TypeOf((*MockCtxManager)(nil).ByKey), arg0, arg1)
}

// Default mocks base method.
func (m *MockCtxManager) Default(arg0 context.Context) repository.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default", arg0)
	ret0, _ := ret[0].(repository.Transaction)
	return ret0
}

// Default indicates an expected call of Default.
func (mr *MockCtxManagerMockRecorder) Default(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MockCtxManager)(nil).Default), arg0)
}
